# -*- coding: utf-8 -*-
"""busan_map의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y656ys9eWBpgfBJ9ZiKG4_JUhtlVbZzm
"""

# Commented out IPython magic to ensure Python compatibility.
# pandas, numpy, seaborn을 불러옵니다.

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# 구버전의 주피터 노트북에서 그래프가 보이는 설정
# %matplotlib inline

# Win
# plt.rc("font", family="Malgun Gothic")
# Mac
plt.rc("font", family="AppleGothic")
plt.rc("axes", unicode_minus=False)

# 폰트가 선명하게 보이도록 설정

from IPython.display import set_matplotlib_formats

set_matplotlib_formats("retina")

# 한글폰트와 마이너스 폰트 설정 확인
plt.title("한글폰트 설정")
plt.plot([-4, -6, 1, 2, 0, 3])

# Commented out IPython magic to ensure Python compatibility.
# # 나눔고딕 설치
!apt -qq -y install fonts-nanum > /dev/null

import matplotlib.font_manager as fm

fontpath = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf'
font = fm.FontProperties(fname=fontpath, size=9)
fm._rebuild()

# 그래프에 retina display 적용
# %config InlineBackend.figure_format = 'retina'

# # Colab 의 한글 폰트 설정
plt.rc('font', family='NanumBarunGothic')

!apt-get update -qq
!apt-get install fonts-nanum* -qq

from matplotlib import font_manager
for font in font_manager.fontManager.ttflist:
    if 'Nanum' in font.name:
        print(font.name, font.fname)

import matplotlib.font_manager as fm
path = '/usr/share/fonts/truetype/nanum/NanumSquareL.ttf'
font_name = fm.FontProperties(fname=path, size=10).get_name()
print(font_name)
plt.rc('font', family=font_name)
fm._rebuild()

"""# 한글폰트와 마이너스 폰트 설정 확인
plt.title("한글폰트 설정")
plt.plot([-4, -6, 1, 2, 0, 3])
"""

df = pd.read_csv("/content/경찰청_경찰관서 위치, 주소_20200409.csv", encoding='euc-kr', sep=',')
df.head(8)

# shape 를 통해 불러온 csv 파일의 크기를 확인합니다.
df.shape

df.info()

df.isnull().sum()

# drop을 하는 방법도 있지만 사용할 컬럼만 따로 모아서 보는 방법도 있습니다.
# 여기에서는 사용할 컬럼만 따로 모아서 사용합니다.

columns = ['청','서' ,'X좌표', 'Y좌표']
print(df.shape)
df = df[columns].copy()
df.shape

# 제거 후 메모리 사용량 보기
df.info()

df_busan = df[df["청"] == "부산청"].copy()
print(df_busan.shape)
df_busan.head()

# "seoul_open_store.csv" 라는 이름으로 저장합니다.
df_busan.to_csv("busan_polise.csv", index=False)

pd.read_csv("busan_polise.csv").head()

df_busan[["X좌표", "Y좌표"]].plot.scatter(x="X좌표", y="Y좌표")

sns.scatterplot(data=df_busan, x="X좌표", y="Y좌표", hue="서")

data = (
    np.random.normal(size=(100, 3)) *
    np.array([[1, 1, 1]]) +
    np.array([[48, 5, 1]])
).tolist()
data[:5]

import folium

lat = df_busan["Y좌표"].mean()
long = df_busan["X좌표"].mean()
lat, long

df_busan.head(10)

df_busan.sample(random_state=31)

df_busan.index

m = folium.Map([lat, long])
m

m = folium.Map([lat, long], zoom_start=12)

m.choropleth(geo_data = geo_json,
               data = df4["총합"],
              columns = [df4.index, df4["총합"]],
              fill_color = "PuRd",
              key_on = "feature.id")

for i in df_busan.index:

    sub_lat = df_busan.loc[i, "Y좌표"]
    sub_long = df_busan.loc[i, "X좌표"]
    title = df_busan.loc[i, "지구대파출소"] + " - " + df_busan.loc[i, "주소"]

    icon_color = "blue"
    if df_busan.loc[i, "청"] == "부산청":
        icon_color = "red"

    folium.Marker(
        [sub_lat, sub_long],
        icon=folium.Icon(color=icon_color),
        popup=f'<i>{title}</i>',
        tooltip=title).add_to(m)

m.save('index.html')
m

heat = df_busan[['Y좌표','X좌표','청']].copy()
heat["청"] = heat["청"].str.strip()
heat["청"] = heat["청"].replace("부산청", 1)
heat = heat.values

heat[:5]

# HeatMap 그리기
from folium.plugins import HeatMap

m = folium.Map([lat, long], tiles='stamentoner', zoom_start=12)

m.choropleth(geo_data = geo_json,
               data = df4["총합"],
              columns = [df4.index, df4["총합"]],
              fill_color = "PuRd",
              key_on = "feature.id")

for i in df_busan.index:
    sub_lat = df_busan.loc[i, "Y좌표"]
    sub_long = df_busan.loc[i, "X좌표"]

    title = df_busan.loc[i, "지구대파출소"] + " - " + df_busan.loc[i, "주소"]

    icon_color = "blue"
    if df_busan.loc[i, "청"] == "부산청":
        icon_color = "green"

    folium.CircleMarker(
        [sub_lat,sub_long ],
        radius=3,
        color=icon_color,
        popup=f'<i>{title}</i>',
        tooltip=title).add_to(m)


HeatMap(heat).add_to(m)

m.save('Heatmap.html')

m

# HeatMap 그리기
from folium.plugins import HeatMap

m = folium.Map([lat, long], tiles='stamentoner', zoom_start=12)


for i in df_busan.index:
    sub_lat = df_busan.loc[i, "Y좌표"]
    sub_long = df_busan.loc[i, "X좌표"]

    title = df_busan.loc[i, "지구대파출소"] + " - " + df_busan.loc[i, "주소"]

    icon_color = "blue"
    if df_busan.loc[i, "청"] == "부산청":
        icon_color = "green"

    folium.CircleMarker(
        [sub_lat,sub_long ],
        radius=3,
        color=icon_color,
        popup=f'<i>{title}</i>',
        tooltip=title).add_to(m)


HeatMap(heat).add_to(m)

for i in df3.index:
    lat = df3.loc[i, "Y좌표"]
    long = df3.loc[i, "X좌표"]
    folium.CircleMarker([lat,long],
                        radius=df3.loc[i,'총합']/500,
                        popup=df3.loc[i,'지역명'],
                        color = 'red',
                        fill=True).add_to(m)

m.save('Heatmap.html')

m

plt.figure(figsize=(8, 9))
sns.scatterplot(data=df, x="X좌표", y="Y좌표",
                hue="청", sizes=(10, 100))

df2 = pd.read_csv("/content/2008년 범죄발생지 현황..csv", encoding='euc-kr', sep=',')
df2.head(8)

df2.shape

df2.isnull().sum()

df2.describe()

df3 = pd.read_csv("/content/2008년 범죄발생지 현황3.csv", encoding='euc-kr', sep=',')
df3.head(8)

df3.info()

df3[['X좌표','Y좌표']].plot.scatter(x='X좌표', y='Y좌표')

import folium
lat = df3["Y좌표"].mean()
long = df3["X좌표"].mean()
lat, long

m = folium.Map([lat, long])
m

from folium.plugins import HeatMap
m = folium.Map([lat, long], zoom_start=12)

for i in df3.index:
    lat = df3.loc[i, "Y좌표"]
    long = df3.loc[i, "X좌표"]
    folium.CircleMarker([lat,long],
                        radius=df3.loc[i,'총합']/500,
                        popup=df3.loc[i,'지역명'],
                        color = 'red',
                        fill=True).add_to(m)
m

heat = df3[['Y좌표','X좌표','총합']].copy()
heat = heat.values

m = folium.Map([lat, long], zoom_start=12)



for i in df3.index:
    lat = df3.loc[i, "Y좌표"]
    long = df3.loc[i, "X좌표"]

    folium.CircleMarker([lat,long],
                        radius=df3.loc[i,'총합']/500,
                        popup=df3.loc[i,'지역명'],
                        color = "red",
                        fill=True).add_to(m)

HeatMap(heat).add_to(m)

m.save('Heatmap.html')

m

df_traffic = pd.read_csv("/content/부산광역시_신호등 현황_20201021.csv", encoding='euc-kr', sep=',')
df_traffic.head(8)

columns = ['행정구역(구)','행정구역(동)' ,'경도', '위도','구분']
df5 = df_traffic[columns].copy()
df5.head()

df5[["경도", "위도"]].plot.scatter(x="경도", y="위도")

import folium
lat = df5["위도"].mean()
long = df5["경도"].mean()
lat, long
m = folium.Map([lat, long])
m

df5.isna().sum()

df5.dropna(axis=0,how='any',inplace=True)

df6 = df5[df5['구분'] == '보행등']
df6

df5.dropna(axis=0, how='any',inplace=True)

m = folium.Map([lat, long], zoom_start=12)

for i in df6.index:

    sub_lat = df6.loc[i, "위도"]
    sub_long = df6.loc[i, "경도"]
    title = df6.loc[i, "행정구역(구)"] + " - " + df6.loc[i, "행정구역(동)"]

    icon_color = "blue"
    if df6.loc[i, "구분"] == "보행등":
        icon_color = "red"


    folium.Marker(
        [sub_lat, sub_long],
        icon=folium.Icon(color=icon_color),
        popup=f'<i>{title}</i>',
        tooltip=title).add_to(m)

m.save('index.html')
m

m = folium.Map([lat, long], zoom_start=12, tiles="Stamen Toner")

for i in df6.index:
    sub_lat = df6.loc[i, "위도"]
    sub_long = df6.loc[i, "경도"]

    title = f"{df6.loc[i, '행정구역(구)']} - {df6.loc[i, '행정구역(동)']}"

    folium.CircleMarker([sub_lat, sub_long],
                        radius=3,
                        color="green",
                          tooltip=title).add_to(m)
m

from folium.plugins import HeatMap
m = folium.Map([lat, long], zoom_start=12, tiles="Stamen Toner")

for i in df6.index:
    sub_lat = df6.loc[i, "위도"]
    sub_long = df6.loc[i, "경도"]

    title = f"{df6.loc[i, '행정구역(구)']} - {df6.loc[i, '행정구역(동)']}"

    folium.CircleMarker([sub_lat, sub_long],
                        radius=3,
                        color="green",
                          tooltip=title).add_to(m)

for i in df3.index:
    lat = df3.loc[i, "Y좌표"]
    long = df3.loc[i, "X좌표"]
    folium.CircleMarker([lat,long],
                        radius=df3.loc[i,'총합']/500,
                        popup=df3.loc[i,'지역명'],
                        color = 'red',
                        fill=True).add_to(m)
m

import json
with open('/content/busan_gu.json') as f:
    geo_json = json.load(f)

m = folium.Map([lat, long], zoom_start=12, tiles="Stamen Toner")

folium.Choropleth(
    geo_data=geo_json,
    name='choropleth',
    data=df3["총합"],
    columns=['구', '총합'],
    key_on='feature.properties.구',
    fill_color='PuRd',
    fill_opacity=0.7,
    line_opacity=0.2,
).add_to(m)

m

geo_path = "./busan_gu.json"
geo_json = json.load(open(geo_path, encoding='utf-8'))

geo_json["features"][0]['properties']["name"]

df4 = pd.read_csv("/content/2008년 범죄발생지 현황4.csv", encoding='euc-kr', sep=',', index_col=0)
df4.head

import pandas as pd
import numpy as np

import folium
import json

map = folium.Map(location = [35.1856505,129.1], zoom_start=12)
map.choropleth(geo_data = geo_json,
               data = df4["총합"],
              columns = [df4.index, df4["총합"]],
              fill_color = "PuRd",
              key_on = "feature.id")

map

heat = df_busan[['Y좌표','X좌표','청']].copy()
heat["청"] = heat["청"].str.strip()
heat["청"] = heat["청"].replace("부산청", 1)
heat = heat.values

m = folium.Map([lat, long], zoom_start=12)

map.choropleth(geo_data = geo_json,
               data = df4["총합"],
              columns = [df4.index, df4["총합"]],
              fill_color = "PuRd",
              key_on = "feature.id")

for i in df_busan.index:

    sub_lat = df_busan.loc[i, "Y좌표"]
    sub_long = df_busan.loc[i, "X좌표"]
    title = df_busan.loc[i, "지구대파출소"] + " - " + df_busan.loc[i, "주소"]

    icon_color = "blue"
    if df_busan.loc[i, "청"] == "부산청":
        icon_color = "red"

    folium.Marker(
        [sub_lat, sub_long],
        icon=folium.Icon(color=icon_color),
        popup=f'<i>{title}</i>',
        tooltip=title).add_to(map)
map

df9 = pd.read_csv("./busan.csv", encoding="cp949", index_col=0)
df9

geo_path = "./busan_gu.json"
geo_str = json.load(open(geo_path, encoding='utf-8'))

map = folium.Map(location = [35.1856505,129.1], zoom_start=12)
map.choropleth(geo_data = geo_str,
               data = df9["price"],
              columns = [df9.index, df9["price"]],
              fill_color = "OrRd",
              key_on = "feature.id")

map

data1 = pd.read_csv("/content/국가철도공단_부산1호선_역위치_20201123.csv", encoding='euc-kr', sep=',')
data1.head(8)

data2 = pd.read_csv("/content/국가철도공단_부산2호선_역위치_20201123.csv", encoding='euc-kr', sep=',')
data3 = pd.read_csv("/content/국가철도공단_부산3호선_역위치_20201123.csv", encoding='euc-kr', sep=',')
data4 = pd.read_csv("/content/국가철도공단_부산4호선_역위치_20201123.csv", encoding='euc-kr', sep=',')

import folium
lat = data1["위도"].mean()
long = data1["경도"].mean()
lat, long
m = folium.Map([lat, long])

#m = folium.Map([lat, long], zoom_start=12, tiles="Stamen Toner")
m = folium.Map([lat, long], zoom_start=12)
# 1호선
for i in data1.index:
    sua_lat = data1.loc[i, "위도"]
    sua_long = data1.loc[i, "경도"]

    title = f"{data1.loc[i, '선명']} - {data1.loc[i, '역명']}"

    folium.CircleMarker([sua_lat, sua_long],
                        radius=3,
                        color="blue",
                          tooltip=title).add_to(m)
# 2호선
for i in data2.index:
    sub_lat = data2.loc[i, "위도"]
    sub_long = data2.loc[i, "경도"]

    title = f"{data2.loc[i, '선명']} - {data2.loc[i, '역명']}"

    folium.CircleMarker([sub_lat, sub_long],
                        radius=3,
                        color="blue",
                          tooltip=title).add_to(m)
# 3호선
for i in data3.index:
    suc_lat = data3.loc[i, "위도"]
    suc_long = data3.loc[i, "경도"]

    title = f"{data3.loc[i, '선명']} - {data3.loc[i, '역명']}"

    folium.CircleMarker([suc_lat, suc_long],
                        radius=3,
                        color="blue",
                          tooltip=title).add_to(m)
# 4호선
for i in data4.index:
    sud_lat = data4.loc[i, "위도"]
    sud_long = data4.loc[i, "경도"]

    title = f"{data4.loc[i, '선명']} - {data4.loc[i, '역명']}"

    folium.CircleMarker([sud_lat, sud_long],
                        radius=3,
                        color="blue",
                          tooltip=title).add_to(m)
m

dat = pd.read_csv("/content/부산광역시_쓰레기 발생량_20191231.csv", encoding='euc-kr', sep=',')
dat.head(8)

data_p = pd.read_csv("/content/부산광역시_주민등록인구통계_20201231.csv", encoding='euc-kr', sep=',',index_col=0)
data_p.head(8)

import pandas as pd
import numpy as np

import folium
import json
geo_path = "./busan_gu.json"
geo_str = json.load(open(geo_path, encoding='utf-8'))

map = folium.Map(location = [35.1856505,129.1], zoom_start=12)

map.choropleth(geo_data = geo_str,
               data = data_p["인구수(명)"],
              columns = [data_p.index, data_p["인구수(명)"]],
              fill_color = "YlGn",
              key_on = "feature.id")

for i in data1.index:
    sua_lat = data1.loc[i, "위도"]
    sua_long = data1.loc[i, "경도"]

    title = f"{data1.loc[i, '선명']} - {data1.loc[i, '역명']}"

    folium.CircleMarker([sua_lat, sua_long],
                        radius=3,
                        color="blue",
                          tooltip=title).add_to(map)
# 2호선
for i in data2.index:
    sub_lat = data2.loc[i, "위도"]
    sub_long = data2.loc[i, "경도"]

    title = f"{data2.loc[i, '선명']} - {data2.loc[i, '역명']}"

    folium.CircleMarker([sub_lat, sub_long],
                        radius=3,
                        color="blue",
                          tooltip=title).add_to(map)
# 3호선
for i in data3.index:
    suc_lat = data3.loc[i, "위도"]
    suc_long = data3.loc[i, "경도"]

    title = f"{data3.loc[i, '선명']} - {data3.loc[i, '역명']}"

    folium.CircleMarker([suc_lat, suc_long],
                        radius=3,
                        color="blue",
                          tooltip=title).add_to(map)
# 4호선
for i in data4.index:
    sud_lat = data4.loc[i, "위도"]
    sud_long = data4.loc[i, "경도"]

    title = f"{data4.loc[i, '선명']} - {data4.loc[i, '역명']}"

    folium.CircleMarker([sud_lat, sud_long],
                        radius=3,
                        color="blue",
                          tooltip=title).add_to(map)

map

data_c = pd.read_csv("/content/부산광역시_소방관서 인원 및 장비 현황_20210332.csv",encoding='cp949', sep=',',index_col=0)
data_c.head(15)

import pandas as pd
import numpy as np

import folium
import json
geo_path = "./busan_gu.json"
geo_str = json.load(open(geo_path, encoding='utf-8'))

map = folium.Map(location = [35.1856505,129.1], zoom_start=11)
map.choropleth(geo_data = geo_str,
               data = data_c["정원(명)"],
               columns = [data_c.index, data_c["정원(명)"]],
               fill_color = "YlOrRd",
               key_on = "feature.id")
map #소방관수

map = folium.Map(location = [35.1856505,129.1], zoom_start=12)
map.choropleth(geo_data = geo_str,
               data = data_c["정원(명)"]/df9["area"],
               columns = [data_c.index, data_c["정원(명)"]/df9["area"]],
               fill_color = "YlOrRd",
               key_on = "feature.id")
map

df = pd.read_csv("/content/부산광역시_쓰레기 발생량_20191231.csv",encoding='euc-kr', sep=',',index_col=0)
df.head(15)

df_t=df.T

df_t

map = folium.Map(location = [35.1856505,129.1], zoom_start=11)

map.choropleth(geo_data = geo_str,
               data = data_c["발생량"],
              columns = [df_t.index, data_c["발생량"]],
              fill_color = "OrRd",
              key_on = "feature.id")

map

map = folium.Map(location = [35.1856505,129.1], zoom_start=11)

map.choropleth(geo_data = geo_str,
               data = data_c["발생량"]/data_p["인구수(명)"],
              columns = [df_t.index, data_c["발생량"]/data_p["인구수(명)"]],
              fill_color = "OrRd",
              key_on = "feature.id")

map #인구당 쓰레기 발생량

map = folium.Map(location = [35.1856505,129.1], zoom_start=11)
map.choropleth(geo_data = geo_str,
               data = data_c["종합병원"]/data_p["인구수(명)"],
               columns = [data_c.index, data_c["종합병원"]/data_p["인구수(명)"]],
               fill_color = "YlGnBu",
               key_on = "feature.id")
map

data = pd.read_csv("/content/부산광역시 치킨(통닭)집 현황_20201027.csv",encoding='cp949', sep=',',index_col=0)
data

map = folium.Map(location = [35.1856505,129.1], zoom_start=11)
map.choropleth(geo_data = geo_str,
               data = data_c["치킨"]/data_p["인구수(명)"],
               columns = [data_c.index, data_c["치킨"]/data_p["인구수(명)"]],
               fill_color = "Blues",
               key_on = "feature.id")
map

map = folium.Map(location = [35.1856505,129.1], zoom_start=11)
map.choropleth(geo_data = geo_str,
               data = data_c["치킨"],
               columns = [data_c.index, data_c["치킨"]],
               fill_color = "Blues",
               key_on = "feature.id")
map

